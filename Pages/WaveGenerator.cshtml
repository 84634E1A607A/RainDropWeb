@page
@using RainDropWeb.Locale
@model RainDropWeb.Pages.WaveGenerator

@{
    Layout = "Shared/Wrapper";
}


<div class="mdui-container mdui-row" id="main-container">
    <script type="text/javascript">
        [1, 2].forEach((ch) => {
            $("#main-container").append(`
            <div class="mdui-col-xs-12 mdui-row" style="margin-top: 60px">
                <div class="mdui-col-xs-12 mdui-row" style="display: flex">
                    <div class="mdui-col-xs-11">
                        <h1 class="mdui-typo-title">${`@Localization.Localize("WAVE_CHANNEL")`.replace("{ch}", ch)}</h1>
                    </div>
                    <div class="mdui-col-xs-1" style="align-self: center; text-align: right">
                        <label class="mdui-switch">
                            <input class="mdui-switch" id="wave-gen-${ch}-enable" type="checkbox"/>
                            <i class="mdui-switch-icon"></i>
                        </label>
                    </div>
                </div>

                <div class="mdui-col-xs-12 mdui-row">
                    <div class="mdui-col-xs-6 mdui-col-md-3 mdui-textfield">
                        <label class="mdui-textfield-label" for="function-${ch}">@Localization.Localize("WAVE_TYPE")</label>
                        <select class="mdui-select" id="function-${ch}" style="width: 100%"> </select>
                    </div>

                    <div class="mdui-col-xs-6 mdui-col-md-3 mdui-textfield" id="frequency-${ch}-div">
                        <label class="mdui-textfield-label" for="frequency-${ch}">@Localization.Localize("WAVE_FREQUENCY")</label>
                        <input class="mdui-textfield-input" id="frequency-${ch}" type="text" value="1k">
                    </div>

                    <div class="mdui-col-xs-6 mdui-col-md-3 mdui-textfield" id="amplitude-${ch}-div">
                        <label class="mdui-textfield-label" for="amplitude-${ch}">@Localization.Localize("WAVE_AMPLITUDE")</label>
                        <input class="mdui-textfield-input" id="amplitude-${ch}" type="text" value="3">
                    </div>

                    <div class="mdui-col-xs-6 mdui-col-md-3 mdui-textfield">
                        <label class="mdui-textfield-label" for="offset-${ch}">@Localization.Localize("WAVE_OFFSET")</label>
                        <input class="mdui-textfield-input" id="offset-${ch}" type="text" value="0">
                    </div>

                    <div class="mdui-col-xs-6 mdui-col-md-3 mdui-textfield" id="symmetry-${ch}-div">
                        <label class="mdui-textfield-label" for="symmetry-${ch}">@Localization.Localize("WAVE_SYM")</label>
                        <input class="mdui-textfield-input" id="symmetry-${ch}" type="text" value="50">
                    </div>

                    <div class="mdui-col-xs-6 mdui-col-md-3 mdui-textfield" id="phase-${ch}-div">
                        <label class="mdui-textfield-label" for="phase-${ch}">@Localization.Localize("WAVE_PHASE")</label>
                        <input class="mdui-textfield-input" id="phase-${ch}" type="text" value="0">
                    </div>
                </div>
            </div>
                `);
        });

        const functions = $("#function-1, #function-2");
        const frequencies = $("#frequency-1, #frequency-2");
        const amplitudes = $("#amplitude-1, #amplitude-2");
        const offsets = $("#offset-1, #offset-2");
        const symmetries = $("#symmetry-1, #symmetry-2");
        const phases = $("#phase-1, #phase-2");

        const data = [{
            enable: false,
            function: 0,
            frequency: 1e3,
            amplitude: 3,
            offset: 0,
            symmetry: .5,
            phase: 0
        }, {
            enable: false,
            function: 0,
            frequency: 1e3,
            amplitude: 3,
            offset: 0,
            symmetry: .5,
            phase: 0
        }]

        const update = (ch) => {
            ch = parseInt(ch);
            if (ch !== 1 && ch !== 2) {
                mdui.snackbar({
                    message: `@Localization.Localize("WAVE_MSG_UNEXPECTED_CHANNEL")`.replace("{ch}", ch),
                    position: "right-top"
                });
                return;
            }

            ch -= 1;

            $.ajax({
                url: "/Api/WaveGenerator",
                type: "POST",
                data: {
                    isChannel2: ch === 1,
                    function: data[ch].function,
                    frequency: data[ch].frequency,
                    amplitude: data[ch].amplitude,
                    offset: data[ch].offset,
                    symmetry: data[ch].symmetry,
                    phase: data[ch].phase
                },
                success: (data) => {
                    if (data.success !== true) {
                        mdui.snackbar({
                            message: data.error,
                            position: "right-top"
                        });
                    }
                }
            });
        }

        [
            [`@Localization.Localize("WAVE_TYPE_DC")`, 0], [`@Localization.Localize("WAVE_TYPE_SINE")`, 1], [`@Localization.Localize("WAVE_TYPE_SQUARE")`, 2],
            [`@Localization.Localize("WAVE_TYPE_TRIANGLE")`, 3], [`@Localization.Localize("WAVE_TYPE_RAMP_UP")`, 4], [`@Localization.Localize("WAVE_TYPE_RAMP_DOWN")`, 5],
            [`@Localization.Localize("WAVE_TYPE_NOISE")`, 6], [`@Localization.Localize("WAVE_TYPE_PULSE")`, 7], [`@Localization.Localize("WAVE_TYPE_TRAPEZIUM")`, 8, true], [`@Localization.Localize("WAVE_TYPE_SINE_POWER")`, 9, true]
        ].forEach((item) => {
            functions.append(`<option value="${item[1]}" ${item[2] === true ? "disabled" : ""}>${item[0]}</option>`);
        });

        functions.on("change", (e) => {
            const ch = parseInt(e.target.id.split("-")[1]);
            const value = e.target.value;
            if (value === "0") {
                $(`#frequency-${ch}, #amplitude-${ch}, #symmetry-${ch}, #phase-${ch}`)
                    .prop("disabled", true);
                $(`#frequency-${ch}-div, #amplitude-${ch}-div, #symmetry-${ch}-div, #phase-${ch}-div`)
                    .addClass("mdui-textfield-disabled");
            } else {
                $(`#frequency-${ch}, #amplitude-${ch}, #symmetry-${ch}, #phase-${ch}`)
                    .prop("disabled", false);
                $(`#frequency-${ch}-div, #amplitude-${ch}-div, #symmetry-${ch}-div, #phase-${ch}-div`)
                    .removeClass("mdui-textfield-disabled");
            }

            data[ch - 1].function = parseInt(value);
            update(ch);
        });


        frequencies.on("change", (e) => {
            const ch = parseInt(e.target.id.split("-")[1]);

            if (e.target.value === "") {
                e.target.value = EngineeringValue.To(data[ch - 1].frequency);
                return;
            }

            const value = EngineeringValue.From(e.target.value.replace(/hz/i, ""));

            if (isNaN(value)) {
                mdui.snackbar({
                    message: `@Localization.Localize("WAVE_MSG_INVALID_FREQUENCY")`,
                    position: "right-top"
                });
                return;
            }

            if (value > 40e6) {
                mdui.snackbar({
                    message: `@Localization.Localize("WAVE_MSG_TOO_HIGH_FREQUENCY")`.replace("{value}", EngineeringValue.To(value)),
                    position: "right-top"
                });
                return;
            }

            if (value <= 0) {
                mdui.snackbar({
                    message: `@Localization.Localize("WAVE_MSG_NOT_POSITIVE_FREQUENCY")`.replace("{value}", EngineeringValue.To(value)),
                    position: "right-top"
                });
                return;
            }

            $(`#frequency-${ch}`).val(EngineeringValue.To(value));
            data[ch - 1].frequency = value;
            update(ch);
        });

        amplitudes.on("change", (e) => {
            const ch = parseInt(e.target.id.split("-")[1]);

            if (e.target.value === "") {
                e.target.value = EngineeringValue.To(data[ch - 1].amplitude);
                return;
            }

            const value = EngineeringValue.From(e.target.value.replace(/v/i, ""));

            if (isNaN(value)) {
                mdui.snackbar({
                    message: `@Localization.Localize("WAVE_MSG_INVALID_AMP")`,
                    position: "right-top"
                });
                return;
            }

            if (value > 5) {
                mdui.snackbar({
                    message: `@Localization.Localize("WAVE_MSG_TOO_HIGH_AMP")`.replace("{value}", EngineeringValue.To(value)),
                    position: "right-top"
                });
                return;
            }

            if (value < 0) {
                mdui.snackbar({
                    message: `@Localization.Localize("WAVE_MSG_TOO_LOW_AMP")`.replace("{value}", EngineeringValue.To(value)),
                    position: "right-top"
                });
                return;
            }

            $(`#amplitude-${ch}`).val(EngineeringValue.To(value));
            data[ch - 1].amplitude = value;
            update(ch);
        });

        offsets.on("change", (e) => {
            const ch = parseInt(e.target.id.split("-")[1]);

            if (e.target.value === "") {
                e.target.value = EngineeringValue.To(data[ch - 1].offset);
                return;
            }

            const value = EngineeringValue.From(e.target.value.replace(/v/i, ""));

            if (isNaN(value)) {
                mdui.snackbar({
                    message: `@Localization.Localize("WAVE_MSG_INVALID_OFFSET")`,
                    position: "right-top"
                });
                return;
            }

            if (value > 5) {
                mdui.snackbar({
                    message: `@Localization.Localize("WAVE_MSG_TOO_HIGH_OFFSET")`.replace("{value}", EngineeringValue.To(value)),
                    position: "right-top"
                });
                return;
            }

            if (value < -5) {
                mdui.snackbar({
                    message: `@Localization.Localize("WAVE_MSG_TOO_LOW_OFFSET")`.replace("{value}", EngineeringValue.To(value)),
                    position: "right-top"
                });
                return;
            }

            $(`#offset-${ch}`).val(EngineeringValue.To(value));
            data[ch - 1].offset = value;
            update(ch);
        });

        symmetries.on("change", (e) => {
            const ch = parseInt(e.target.id.split("-")[1]);

            if (e.target.value === "") {
                e.target.value = EngineeringValue.To(data[ch - 1].symmetry);
                return;
            }

            const value = EngineeringValue.From(e.target.value.replace(/%/i, ""));

            if (isNaN(value)) {
                mdui.snackbar({
                    message: `@Localization.Localize("WAVE_MSG_INVALID_SYM")`,
                    position: "right-top"
                });
                return;
            }

            if (value > 100) {
                mdui.snackbar({
                    message: `@Localization.Localize("WAVE_MSG_TOO_HIGH_SYM")`.replace("{value}", EngineeringValue.To(value)),
                    position: "right-top"
                });
                return;
            }

            if (value < 0) {
                mdui.snackbar({
                    message: `@Localization.Localize("WAVE_MSG_TOO_LOW_SYM")`.replace("{value}", EngineeringValue.To(value)),
                    position: "right-top"
                });
                return;
            }

            $(`#symmetry-${ch}`).val(EngineeringValue.To(value));
            data[ch - 1].symmetry = value / 100;
            update(ch);
        });

        phases.on("change", (e) => {
            const ch = parseInt(e.target.id.split("-")[1]);

            if (e.target.value === "") {
                e.target.value = EngineeringValue.To(data[ch - 1].phase);
                return;
            }

            let value = EngineeringValue.From(e.target.value.replace(/°/i, ""));

            if (isNaN(value)) {
                mdui.snackbar({
                    message: `@Localization.Localize("WAVE_MSG_INVALID_PHASE")`,
                    position: "right-top"
                });
                return;
            }

            value %= 360;
            if (value < 0) value += 360;

            $(`#phase-${ch}`).val(EngineeringValue.To(value));
            data[ch - 1].phase = value;
            update(ch);
        });

        const enableButton = $("#wave-gen-1-enable, #wave-gen-2-enable");
        enableButton.on("click", (e) => {
            const ch = parseInt(e.target.id.split("-")[2]);
            const enable = $(`#wave-gen-${ch}-enable`).prop("checked");
            data[ch - 1].enable = enable;

            $.ajax({
                url: "/Api/WaveGenerator/Enable",
                method: "POST",
                data: {
                    isChannel2: ch === 2,
                    enabled: enable
                }
            });
        });
    </script>
</div>

<script type="text/javascript">
    // Retrieve initial state
    $.ajax({
        method: "GET",
        url: "/Api/Current",
        success: function (data) {
            if (data.success !== true || data.data.name === "") {
                mdui.alert(`@Localization.Localize("SITE_MSG_FAILED_TO_RETRIEVE_STATUS")`);
                $(`#function-1, #function-2`).change();
                return;
            }

            const waveGen = data.data.wavegen;
            for (let i = 1; i <= 2; ++i) {
                $(`#wave-gen-${i}-enable`).prop("checked", waveGen[i - 1].enabled);
                const func = $(`#function-${i}`).val(waveGen[i - 1].function);
                $(`#frequency-${i}`).val(EngineeringValue.To(waveGen[i - 1].frequency));
                $(`#amplitude-${i}`).val(EngineeringValue.To(waveGen[i - 1].amplitude));
                $(`#offset-${i}`).val(EngineeringValue.To(waveGen[i - 1].offset));
                $(`#symmetry-${i}`).val(EngineeringValue.To(waveGen[i - 1].symmetry * 100));
                $(`#phase-${i}`).val(EngineeringValue.To(waveGen[i - 1].phase));
                func.change();
            }
        }
    })
</script>