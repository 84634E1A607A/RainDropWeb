@page
@using RainDropWeb.Locale
@model RainDropWeb.Pages.Oscilloscope

@{
    Layout = "Shared/Wrapper";
}


<div class="mdui-container mdui-row" style="padding-top: 60px">
    <div class="mdui-col-xs-12">
        <div class="mdui-card">
            <div class="mdui-card-content">
                <div id="oscilloscope-div" style="right: 100%">
                    <canvas id="oscilloscope-main"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="mdui-col-xs-12" style="margin-top: 20px">
        <div style="display: flex">
            <div style="margin: 20px">
                <button class="mdui-btn mdui-color-theme mdui-ripple" id="start-button">@Localization.Localize("osc-start")</button>
                <script type="text/javascript">
                    $("#start-button").click(function () {
                        if (!oscilloscope.started) {
                            oscilloscope.start();
                        } else {
                            oscilloscope.stop();
                        }
                    });
                </script>
            </div>
            <div style="margin: 20px">
                <button class="mdui-btn mdui-color-theme mdui-ripple" id="single-run-button">
                    @Localization.Localize("osc-single")
                </button>
                <script type="text/javascript">
                    $("#single-run-button").click(function () {
                        oscilloscope.singleRun = oscilloscope.average;
                        if (!oscilloscope.started) {
                            oscilloscope.start();
                        }
                    })
                </script>
            </div>
            <div style="margin: 20px">
                <button class="mdui-btn mdui-color-theme mdui-ripple" id="auto-set-button">
                    @Localization.Localize("osc-auto-set")
                </button>
                <script type="text/javascript">
                    $("#auto-set-button").click(function () {
                        oscilloscope.autoSet();
                    })
                </script>
            </div>
            <div style="margin: 20px">
                <button class="mdui-btn mdui-color-theme mdui-ripple" id="manual-trigger">
                    @Localization.Localize("osc-trigger-manual")
                </button>
                <script type="text/javascript">
                    $("#manual-trigger").click(function () {
                        oscilloscope.syncTrigger();
                    })
                </script>
            </div>
        </div>
    </div>

    <div class="mdui-col-xs-12" style="margin-top: 60px">
        <h1 class="mdui-typo-title">@Localization.Localize("osc-device-attribute")</h1>
        <div class="mdui-row">

            <div class="mdui-col-xs-6 mdui-col-md-3 mdui-textfield">
                <label class="mdui-textfield-label" for="time-per-grid">@Localization.Localize("osc-base")</label>
                <input class="mdui-textfield-input" id="time-per-grid" type="text" value="1m">
                <script type="text/javascript">
                    $("#time-per-grid").change(function () {
                        const time = $(this).val().trim();

                        if (time === "") {
                            $(this).val(EngineeringValue.To(oscilloscope.timePerGrid));
                            return;
                        }

                        const timePerGrid = EngineeringValue.From(time.replace(/s$/i, ""));

                        if (isNaN(timePerGrid)) {
                            mdui.snackbar({
                                message: `@Localization.Localize("osc-msg-invalid-timebase")`.replace("{time}", time),
                                position: "right-top"
                            });
                        } else if (timePerGrid > 0.2) {
                            mdui.snackbar({
                                message: `@Localization.Localize("osc-msg-too-long-timebase")`.replace("{time}", time),
                                position: "right-top"
                            });
                        } else if (timePerGrid < 1e-6) {
                            mdui.snackbar({
                                message: `@Localization.Localize("osc-msg-too-short-timebase")`.replace("{time}", time),
                                position: "right-top"
                            });
                        } else {
                            $(this).val(EngineeringValue.To(timePerGrid));
                            oscilloscope.timePerGrid = timePerGrid;
                            oscilloscope.redraw();

                            $("#sampling-frequency").val(EngineeringValue.To(
                                Math.min(oscilloscope.getPreferredFrequency(), 40e6))
                            ).change();
                        }
                    })
                </script>
            </div>

            <div class="mdui-col-xs-6 mdui-col-md-3 mdui-textfield">
                <label class="mdui-textfield-label" for="sampling-frequency">@Localization.Localize("osc-rate")</label>
                <input class="mdui-textfield-input" id="sampling-frequency" type="text" value="1M">
                <script type="text/javascript">
                    $("#sampling-frequency").change(function () {
                        const frequency = $(this).val().trim();

                        if (frequency === "") {
                            $(this).val(EngineeringValue.To(oscilloscope.frequency));
                            return;
                        }

                        const samplingFrequency = EngineeringValue.From(frequency.replace(/Hz$/i, ""));

                        if (isNaN(samplingFrequency))
                            mdui.snackbar({
                                message: `@Localization.Localize("osc-msg-invalid-rate")`.replace("{frequency}", frequency),
                                position: "right-top"
                            });
                        else if (samplingFrequency > 1e3 && samplingFrequency <= 40e6) {
                            $(this).val(EngineeringValue.To(samplingFrequency));
                            oscilloscope.frequency = samplingFrequency;
                            oscilloscope.sync();
                        } else if (samplingFrequency < 1e3)
                            mdui.snackbar({
                                message: `@Localization.Localize("osc-msg-too-low-rate")`.replace("{samplingFrequency}", samplingFrequency),
                                position: "right-top"
                            });
                        else if (samplingFrequency > 40e6)
                            mdui.snackbar({
                                message: `@Localization.Localize("osc-msg-too-high-rate")`.replace("{samplingFrequency / 1e6}", samplingFrequency / 1e6),
                                position: "right-top"
                            });
                    });
                </script>
            </div>

            <div class="mdui-col-xs-6 mdui-col-md-3 mdui-textfield">
                <label class="mdui-textfield-label" for="samples">@Localization.Localize("osc-samples")</label>
                <select class="mdui-select" id="samples" style="width: 100%"> </select>
                <script type="text/javascript">
                    const samples = $("#samples");
                    [32, 64, 128, 256, 512, 1024, 2048].forEach((v) => samples.append(
                        `<option value="${v}">${v}</option>`
                    ));

                    samples.children().last().attr("selected", "selected");

                    samples.change(function () {
                        oscilloscope.samples = parseInt($(this).val());
                        oscilloscope.sync();
                    })
                </script>
            </div>

            <div class="mdui-col-xs-6 mdui-col-md-3 mdui-textfield">
                <label class="mdui-textfield-label" for="average">平均</label>
                <select class="mdui-select" id="average" style="width: 100%"> </select>
                <script type="text/javascript">
                    const average = $("#average");
                    [1, 2, 4, 8, 16].forEach((v) => average.append(
                        `<option value="${v}">${v}</option>`
                    ));

                    average.change(function () {
                        oscilloscope.average = parseInt($(this).val());
                        oscilloscope.sync();
                    })
                </script>
            </div>

        </div>
    </div>

    <div id="channel-properties">
        <script type="text/javascript">
            [1, 2].forEach((c) => {
                $("#channel-properties").append(`
            <div class="mdui-col-xs-12 mdui-col-md-6" style="margin-top: 60px">
                <div class="mdui-row" style="display: flex">
                    <div class="mdui-col-xs-10">
                        <h1 class="mdui-typo-title">${`@Localization.Localize("osc-channel")`.replace("{c}", c)}</h1>
                    </div>
                    <div class="mdui-col-xs-2" style="align-self: center; text-align: right">
                        <label class="mdui-switch">
                            <input class="mdui-switch" id="channel-${c}-enable" type="checkbox" checked/>
                            <i class="mdui-switch-icon"></i>
                        </label>
                    </div>
                </div>
                <div class="mdui-row">

                    <div class="mdui-col-xs-6">
                        <div class="mdui-textfield">
                            <label for="channel-${c}-voltage" class="mdui-textfield-label">${`@Localization.Localize("osc-range")`}</label>
                            <input class="mdui-textfield-input" type="text" value="2" id="channel-${c}-voltage">
                        </div>
                    </div>

                    <div class="mdui-col-xs-6">
                        <div class="mdui-textfield">
                            <label for="channel-${c}-offset" class="mdui-textfield-label">${`@Localization.Localize("osc-offset")`}</label>
                            <input class="mdui-textfield-input" type="text" value="0" id="channel-${c}-offset">
                        </div>
                    </div>
                </div>
            </div>
                    `);

                $(`#channel-${c}-enable`).change(function () {
                    oscilloscope.enabled[c - 1] = $(this).prop("checked");
                    oscilloscope.sync();
                    oscilloscope.redraw();
                });

                $(`#channel-${c}-voltage`).change(function () {
                    const voltage = $(this).val().trim();

                    if (voltage === "") {
                        $(this).val(EngineeringValue.To(oscilloscope.amplitudePerGrid[c - 1]));
                        return;
                    }

                    const voltagePerGrid = EngineeringValue.From(voltage.replace(/v$/i, ""));

                    if (isNaN(voltagePerGrid))
                        mdui.snackbar({
                            message: `@Localization.Localize("osc-msg-invalid-voltage")`.replace("{voltage}", voltage),
                            position: "right-top"
                        });
                    else if (voltagePerGrid < 1e-3)
                        mdui.snackbar({
                            message: `@Localization.Localize("osc-msg-too-low-voltage")`.replace("{value}", EngineeringValue.To(voltagePerGrid)),
                            position: "right-top"
                        });
                    else {
                        $(this).val(EngineeringValue.To(voltagePerGrid));
                        oscilloscope.amplitudePerGrid[c - 1] = voltagePerGrid;
                        oscilloscope.sync();
                        oscilloscope.redraw();
                    }
                })

                $(`#channel-${c}-offset`).change(function () {
                    const offset = $(this).val().trim();

                    if (offset === "") {
                        $(this).val(EngineeringValue.To(oscilloscope.offset[c - 1]));
                        return;
                    }

                    const offsetVoltage = EngineeringValue.From(offset.replace(/v$/i, ""));

                    if (isNaN(offsetVoltage))
                        mdui.snackbar({
                            message: `@Localization.Localize("osc-msg-invalid-offset")`.replace("{offset}", offset),
                            position: "right-top"
                        });
                    else {
                        $(this).val(EngineeringValue.To(offsetVoltage));
                        oscilloscope.offset[c - 1] = offsetVoltage;
                        oscilloscope.redraw();
                    }
                });
            });
        </script>
    </div>

    <div class="mdui-col-xs-12" style="margin-top: 60px">
        <h1 class="mdui-typo-title">@Localization.Localize("osc-trigger-attribute")</h1>
        <div class="mdui-row">

            <div class="mdui-col-xs-6 mdui-col-md-3 mdui-textfield">
                <label class="mdui-textfield-label" for="trigger-source">@Localization.Localize("osc-trigger-source")</label>
                <select class="mdui-select" id="trigger-source" style="width: 100%"> </select>
                <script type="text/javascript">
                    const triggerSource = $("#trigger-source");
                    ["1", "2"].forEach((v) => triggerSource.append(
                        `<option value="${v}">${`@Localization.Localize("osc-channel")`.replace("{c}", v)}</option>`
                    ));

                    triggerSource.change(function () {
                        oscilloscope.triggerSource = parseInt($(this).val()) - 1;
                        oscilloscope.syncTrigger();
                        oscilloscope.redraw();
                    })
                </script>
            </div>

            <div class="mdui-col-xs-6 mdui-col-md-3 mdui-textfield">
                <label class="mdui-textfield-label" for="trigger-mode">@Localization.Localize("osc-trigger-mode")</label>
                <select class="mdui-select" id="trigger-mode" style="width: 100%"> </select>
                <script type="text/javascript">
                    const triggerMode = $("#trigger-mode");
                    [[2, `@Localization.Localize("osc-trigger-mode-edge")`], [0, `@Localization.Localize("osc-trigger-mode-rise")`], [1, `@Localization.Localize("osc-trigger-mode-fall")`]].forEach((v) => triggerMode.append(
                        `<option value="${v[0]}">${v[1]}</option>`
                    ));

                    triggerMode.change(function () {
                        oscilloscope.triggerCondition = parseInt($(this).val());
                        oscilloscope.syncTrigger();
                    })
                </script>
            </div>

            <div class="mdui-col-xs-6 mdui-col-md-3 mdui-textfield">
                <label class="mdui-textfield-label" for="trigger-voltage">@Localization.Localize("osc-trigger-voltage")</label>
                <input class="mdui-textfield-input" id="trigger-voltage" type="text" value="0">
                <script type="text/javascript">
                    $("#trigger-voltage").change(function () {
                        const voltage = $(this).val().trim();

                        if (voltage === "") {
                            $(this).val(EngineeringValue.To(oscilloscope.triggerVoltage));
                            return;
                        }

                        const triggerVoltage = EngineeringValue.From(voltage.replace(/v$/i, ""));

                        if (isNaN(triggerVoltage))
                            mdui.snackbar({
                                message: `@Localization.Localize("osc-msg-invalid-voltage")`.replace("{voltage}", voltage),
                                position: "right-top"
                            });
                        else {
                            $(this).val(EngineeringValue.To(triggerVoltage));
                            oscilloscope.triggerVoltage = triggerVoltage;
                            oscilloscope.syncTrigger();
                            oscilloscope.redraw();
                        }
                    });
                </script>
            </div>

        </div>
    </div>
</div>

<script type="text/javascript">
    class Oscilloscope {
        _timeGridCount = 10;
        _voltageGridCount = 6;
        _timeGridSize = 0;
        _voltageGridSize = 0;

        // Data for channel 1 and 2
        _data = [null, null];
        _dataFrequency = 1e6;

        started = false;
        singleRun = 0;
        amplitudePerGrid = [2, 2];
        offset = [0, 0];
        enabled = [true, true];
        timePerGrid = 1e-3;
        frequency = 1e6;
        samples = 2048;
        average = 1;

        triggerAutoTimeout = true;

        // 0 for CH1 and 1 for CH2
        triggerSource = 0;
        triggerVoltage = 0;

        // 0 for Rise, 1 for Fall, 2 for Edge
        triggerCondition = 2;

        _canvas = null;
        _ctx = null;
        
        getStatus() {
            $.ajax({
                url: "/Api/Current",
                type: "GET",
                success: (data) => {
                    if (data.success !== true || data.data.name === "") {
                        mdui.alert(`@Localization.Localize("site-msg-failed-to-retrieve-status")`);
                        return;
                    }

                    const osc = data.data.oscilloscope;

                    for (let ch = 1; ch <= 2; ++ch) {
                        $(`#channel-${ch}-enable`).prop("checked", osc.channels[ch - 1].enabled);
                        $(`#channel-${ch}-voltage`).val(EngineeringValue.To(osc.channels[ch - 1].amplitude / this._voltageGridCount * 2));
                        $(`#channel-${ch}-offset`).val(EngineeringValue.To(osc.channels[ch - 1].offset));
                    }

                    this.enabled = [
                        osc.channels[0].enabled, osc.channels[1].enabled
                    ];

                    this.amplitudePerGrid = [
                        osc.channels[0].amplitude / this._voltageGridCount * 2,
                        osc.channels[1].amplitude / this._voltageGridCount * 2
                    ];

                    this.offset = [
                        osc.channels[0].offset, osc.channels[1].offset
                    ];

                    $("#time-per-grid").val(EngineeringValue.To(osc.timebase / this._timeGridCount));
                    this.timePerGrid = osc.timebase / this._timeGridCount;

                    $("#sampling-frequency").val(EngineeringValue.To(osc.frequency));
                    this.frequency = osc.frequency;

                    $("#samples").val(osc.samples);
                    this.samples = osc.samples;

                    $("#average").val(osc.average);
                    this.average = osc.average;

                    this.triggerAutoTimeout = true;

                    $("#trigger-source").val(osc.trigger.source + 1);
                    this.triggerSource = osc.trigger.source;

                    $("#trigger-voltage").val(EngineeringValue.To(osc.trigger.level));
                    this.triggerVoltage = osc.trigger.level;

                    $("#trigger-mode").val(osc.trigger.condition);
                    this.triggerCondition = osc.trigger.condition;

                    this.redraw();
                }
            });
        }

        constructor() {
            this._canvas = document.getElementById("oscilloscope-main");
            this._outerDiv = document.getElementById("oscilloscope-div");
            this._ctx = this._canvas.getContext("2d");

            setInterval(() => {
                this.resize();
            }, 100);

            // Retrieve device status
            this.getStatus();
        }

        getPreferredFrequency() {
            return 1 / (this.timePerGrid * this._timeGridCount) * this.samples;
        }

        resize() {
            if (this._outerDiv === undefined)
                return;

            const width = this._outerDiv.clientWidth;

            if (width === this._canvas.width)
                return;

            this._canvas.width = width;
            this._canvas.height = width * 9 / 16;
            this._timeGridSize = this._canvas.width / this._timeGridCount;
            this._voltageGridSize = this._canvas.height / this._voltageGridCount;
            this.redraw();
        }

        redraw() {
            const ctx = this._ctx;
            // Background
            ctx.fillStyle = "black";
            ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);

            // Grid
            ctx.setLineDash([3, 7]);
            ctx.strokeStyle = "yellow";
            ctx.lineWidth = .5;
            for (let i = 1; i < this._timeGridCount; ++i) {
                ctx.beginPath();
                ctx.moveTo(Math.round(i * this._timeGridSize), 0);
                ctx.lineTo(Math.round(i * this._timeGridSize), this._canvas.height);
                ctx.stroke();
            }

            for (let i = 1; i < this._voltageGridCount; ++i) {
                ctx.beginPath();
                ctx.moveTo(0, Math.round(i * this._voltageGridSize));
                ctx.lineTo(this._canvas.width, Math.round(i * this._voltageGridSize));
                ctx.stroke();
            }

            // Label
            ctx.font = "12px Arial";
            ctx.fillStyle = "gray";
            for (let i = 1; i < this._timeGridCount; ++i) {
                const text = EngineeringValue.To((i - this._timeGridCount / 2) * this.timePerGrid);
                const textWidth = ctx.measureText(text).width;
                ctx.fillText(text, Math.round(i * this._timeGridSize - textWidth / 2), this._canvas.height - 2);
            }

            ctx.fillStyle = "yellow";
            for (let i = 1; i < this._voltageGridCount; ++i) {
                const text = EngineeringValue.To(-(i - this._voltageGridCount / 2) * this.amplitudePerGrid[0] - this.offset[0]);
                ctx.fillText(text, 5, Math.round(i * this._voltageGridSize + 4));
            }

            ctx.fillStyle = "cyan";
            for (let i = 1; i < this._voltageGridCount; ++i) {
                const text = EngineeringValue.To(-(i - this._voltageGridCount / 2) * this.amplitudePerGrid[1] - this.offset[1]);
                const textWidth = ctx.measureText(text).width;
                ctx.fillText(text, this._canvas.width - textWidth - 5, Math.round(i * this._voltageGridSize + 4));
            }

            // Trigger
            ctx.setLineDash([]);
            ctx.strokeStyle = "yellow";
            ctx.fillStyle = this.triggerSource === 0 ? "yellow" : "cyan";
            ctx.beginPath();
            const triggerY = this._canvas.height / 2 - this.triggerVoltage / this.amplitudePerGrid[this.triggerSource] * this._voltageGridSize;
            ctx.moveTo(this._canvas.width - 5, triggerY);
            ctx.lineTo(this._canvas.width, triggerY - 2);
            ctx.lineTo(this._canvas.width, triggerY + 2);
            ctx.fill();

            // Channel
            ctx.setLineDash([]);
            ctx.lineWidth = 1;
            for (let channel = 0; channel < 2; ++channel) {
                if (!this.enabled[channel] || this._data[channel] === null)
                    continue;

                const max = this._data[channel].max;
                const min = this._data[channel].min;
                const avg = this._data[channel].average;
                const rms = this._data[channel].rms;
                const period = this._data[channel].period;
                const data = this._data[channel].data;

                // Line
                ctx.strokeStyle = (channel === 1) ? "cyan" : "yellow";
                const deltaX = 1 / this._dataFrequency / this.timePerGrid * this._timeGridSize;
                const stepY = this._voltageGridSize / this.amplitudePerGrid[channel];
                const offsetY = this.offset[channel] / this.amplitudePerGrid[channel] * this._voltageGridSize;
                for (let i = 0; i < data.length - 1; ++i) {
                    const startX = this._canvas.width / 2 + (i - (data.length - 1) / 2) * deltaX;
                    const stopX = this._canvas.width / 2 + (i + 1 - (data.length - 1) / 2) * deltaX;
                    const startY = this._canvas.height / 2 - data[i] * stepY - offsetY;
                    const stopY = this._canvas.height / 2 - data[i + 1] * stepY - offsetY;
                    ctx.beginPath();
                    ctx.moveTo(startX, startY);
                    ctx.lineTo(stopX, stopY);
                    ctx.stroke();
                }

                // Stat
                ctx.font = "12px Arial";
                ctx.fillStyle = (channel === 1) ? "cyan" : "yellow";
                const strMax = `Max: ${EngineeringValue.To(max)}V`;
                const strMaxWidth = ctx.measureText(strMax).width;
                const strMin = `Min: ${EngineeringValue.To(min)}V`;
                const strMinWidth = ctx.measureText(strMin).width;
                const strAvg = `Avg: ${EngineeringValue.To(avg)}V`;
                const strAvgWidth = ctx.measureText(strAvg).width;
                const strRms = `RMS: ${EngineeringValue.To(rms)}V`;
                const strRmsWidth = ctx.measureText(strRms).width;
                const strPeriod = `Period: ${EngineeringValue.To(period)}s`;
                const strPeriodWidth = ctx.measureText(strPeriod).width;
                ctx.fillText(strMax, (channel === 0) ? 5 : this._canvas.width - strMaxWidth - 5, 12);
                ctx.fillText(strMin, (channel === 0) ? 5 : this._canvas.width - strMinWidth - 5, 24);
                ctx.fillText(strAvg, (channel === 0) ? 5 : this._canvas.width - strAvgWidth - 5, 36);
                ctx.fillText(strRms, (channel === 0) ? 5 : this._canvas.width - strRmsWidth - 5, 48);
                ctx.fillText(strPeriod, (channel === 0) ? 5 : this._canvas.width - strPeriodWidth - 5, 60);
            }
        }

        sync() {
            $.ajax({
                method: "POST",
                url: "/Api/Oscilloscope",
                data: {
                    frequency: this.frequency,
                    samples: this.samples,
                    timebase: this.timePerGrid * this._timeGridCount,
                    average: this.average,
                },
                success: (data) => {
                    if (data.success === false)
                        mdui.snackbar({
                            message: `@Localization.Localize("osc-msg-sync-time-fail")`.replace("{error}", data.error),
                            position: "right-top"
                        })
                }
            });

            for (const channel in [0, 1]) {
                $.ajax({
                    method: "POST",
                    url: `/Api/Oscilloscope/Channel/${channel}`,
                    data: {
                        enabled: this.enabled[channel],
                        offset: this.offset[channel],
                        amplitude: this.amplitudePerGrid[channel] * this._voltageGridCount / 2,
                    },
                    success: (data) => {
                        if (data.success === false)
                            mdui.snackbar({
                                message: `@Localization.Localize("osc-msg-sync-channel-fail")`.replace("{channel}", channel).replace("{error}", data.error),
                                position: "right-top"
                            });
                    }
                });
            }
        }

        syncTrigger() {
            const started = this.started;
            if (started)
                this.stop();

            $.ajax({
                method: "POST",
                url: "/Api/Oscilloscope/Trigger",
                data: {
                    source: this.triggerSource,
                    level: this.triggerVoltage,
                    condition: this.triggerCondition,
                    autoTimeout: this.triggerAutoTimeout,
                },
                success: (data) => {
                    if (data.success === false)
                        mdui.snackbar({
                            message: `@Localization.Localize("osc-msg-sync-trigger-fail")`.replace("{error}", data.error),
                            position: "right-top"
                        });
                }
            })

            // Wait till the current sample has been collected and then restart
            if (started)
                setTimeout(() => this.start(), 200 + 1000 * this.timePerGrid * this._timeGridCount);
        }

        _update() {
            $.ajax({
                method: "GET",
                url: `/Api/Oscilloscope/Read`,
                success: (data) => {
                    if (data.success === false) {
                        // If stop() has been called, this query can fail
                        if (!this.started)
                            return;

                        mdui.snackbar({
                            message: `@Localization.Localize("osc-msg-catch-data-fail")`.replace("{error}", data.error),
                            position: "right-top"
                        });

                        if (this._reconnectCount !== undefined && this._reconnectCount < 2) {
                            this._reconnectCount++;
                            if (this._reconnectCount === 1) {
                                this.stop();
                                setTimeout(() => this.start(), 300);
                            } else {
                                this._update();
                            }
                        } else {
                            this.stop();
                        }
                    } else {
                        this._reconnectCount = 0;
                        if (this.enabled[0])
                            this._data[0] = data.data.a;

                        if (this.enabled[1])
                            this._data[1] = data.data.b;

                        this._dataFrequency = this.frequency;
                        this.redraw();

                        if (this.singleRun > 0) {
                            this.singleRun--;
                            if (this.singleRun === 0) {
                                this.stop();
                                return;
                            }
                        }

                        (() => {
                            this._update();
                        })();
                    }
                }
            });
        }

        start() {
            if (this.started)
                return;

            $.ajax({
                method: "POST",
                url: "/Api/Oscilloscope/Start",
                success: (data) => {
                    if (data.success === false) {
                        if (data.error.search("FtIoError") !== -1) {
                            mdui.alert(`@Localization.Localize("site-msg-io-error")`);
                            return;
                        }

                        mdui.snackbar({
                            message: `@Localization.Localize("osc-msg-start-fail")`.replace("{error}", data.error),
                            position: "right-top"
                        });
                    } else {
                        this.started = true;
                        $("#start-button").text(`@Localization.Localize("osc-stop")`);
                        (() => {
                            this._update();
                        })();
                    }
                }
            });
        }

        stop() {
            if (!this.started)
                return;

            $("#start-button").text(`@Localization.Localize("osc-start")`);

            $.ajax({
                method: "POST",
                url: "/Api/Oscilloscope/Stop",
                success: (data) => {
                    if (data.success === false)
                        mdui.snackbar({
                            message: `@Localization.Localize("osc-msg-stop-fail")`.replace("{error}", data.error),
                            position: "right-top"
                        });
                }
            });

            this.started = false;
        }
        
        autoSet() {
            $.ajax({
                method: "POST",
                url: "/Api/Oscilloscope/AutoSet",
                success: (data) => {
                    if (data.success === false) {
                        mdui.snackbar({
                            message: `@Localization.Localize("osc-msg-auto-set-fail")`.replace("{error}", data.error),
                            position: "right-top"
                        });
                    }
                    else {
                        this.getStatus();
                    }
                }
            });
        }
    }

    oscilloscope = new Oscilloscope();
</script>